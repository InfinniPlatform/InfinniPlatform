<?xml version="1.0" encoding="utf-8"?>

<configuration>

    <configSections>
        <section name="autofac" type="Autofac.Configuration.SectionHandler, Autofac.Configuration"/>
    </configSections>

    <appSettings>

        <!-- ЛОГИРОВАНИЕ -->

        <!-- Путь к файлу конфигурации лога log4net - https://logging.apache.org/log4net/release/manual/configuration.html (по умолчанию - 'Log.config') -->
        <add key="LogConfigFile" value="Log.config" />


        <!-- ХОСТИНГ СЕРВИСОВ -->

        <!-- Адрес для хостинга сервисов (по умолчанию - 'localhost') -->
        <add key="AppServerName" value="localhost" />
        <!-- Порт для хостинга сервисов (по умолчанию - 9900) -->
        <add key="AppServerPort" value="9900" />


        <!-- ПРОВАЙДЕРЫ ВНЕШНЕЙ АУТЕНТИФИКАЦИИ -->

        <!-- Разрешает аутентификацию через ADFS (допустимые значения - true или false, по умолчанию - false) -->
        <add key="AppServerAuthAdfsEnable" value="false" />
        <!-- Адрес сервера ADFS (например: 'myadfs.org:1234', значения по умолчанию нет) -->
        <add key="AppServerAuthAdfsServer" value="Adfs-Server" />

        <!-- Разрешает аутентификацию через Google+ (допустимые значения - true или false, по умолчанию - false) -->
        <add key="AppServerAuthGoogleEnable" value="false" />
        <!-- ClientId приложения в Goole+ (значения по умолчанию нет) -->
        <add key="AppServerAuthGoogleClientId" value="Google-Client-Id" />
        <!-- ClientSecret приложения в Goole+ (значения по умолчанию нет) -->
        <add key="AppServerAuthGoogleClientSecret" value="Google-Client-Secret" />

        <!-- Разрешает аутентификацию через ЕСИА (допустимые значения - true или false, по умолчанию - false) -->
        <add key="AppServerAuthEsiaEnable" value="false" />
        <!-- Базовый адрес сервера ЕСИА (например: 'https://esia.ru', значения по умолчанию нет) -->
        <add key="AppServerAuthEsiaServer" value="Esia-Server" />
        <!-- ClientId приложения в ЕСИА (значения по умолчанию нет) -->
        <add key="AppServerAuthEsiaClientId" value="Esia-Client-Id" />
        <!-- ClientSecret приложения в ЕСИА (используется Thumbprint сертификата приложения, значения по умолчанию нет) -->
        <add key="AppServerAuthEsiaClientSecret" value="Esia-Client-Certificate-Thumbprint" />

        <!-- Разрешает аутентификацию через ВКонтакте (допустимые значения - true или false, по умолчанию - false) -->
        <add key="AppServerAuthVkEnable" value="false" />
        <!-- ClientId приложения в ВКонтакте (значения по умолчанию нет) -->
        <add key="AppServerAuthVkClientId" value="Vk-Client-Id" />
        <!-- ClientSecret приложения в ВКонтакте (значения по умолчанию нет) -->
        <add key="AppServerAuthVkClientSecret" value="Vk-Client-Secret" />

        <!-- Разрешает аутентификацию через Facebook (допустимые значения - true или false, по умолчанию - false) -->
        <add key="AppServerAuthFacebookEnable" value="false" />
        <!-- ClientId приложения в Facebook (значения по умолчанию нет) -->
        <add key="AppServerAuthFacebookClientId" value="Facebook-Client-Id" />
        <!-- ClientSecret приложения в Facebook (значения по умолчанию нет) -->
        <add key="AppServerAuthFacebookClientSecret" value="Facebook-Client-Secret" />


        <!-- ELASTICSEARCH -->

        <!-- Список базовых адресов узлов ElasticSearch (через ',' или ';', по умолчанию - 'http://localhost:9200') -->
        <add key="ElasticSearchNodes" value="http://localhost:9200" />
        <!-- Логин для доступа к ElasticSearch через Shield -->
        <add key="ElasticSearchLogin" value="es_admin" />
        <!-- Пароль для доступа к ElasticSearch через Shield-->
        <add key="ElasticSearchPassword" value="es_admin" />


        <!-- CASSANDRA (obsolete) -->

        <!-- Порт подключения к узлам Cassandra (по умолчанию - 9042) -->
        <add key="CassandraContactPort" value="9042" />
        <!-- Список узлов Cassandra (через ',' или ';', по умолчанию - 'localhost') -->
        <add key="CassandraContactPoints" value="localhost" />
        <!-- Имя пространства ключей Cassandra для приложения (по умолчанию - 'system') -->
        <add key="CassandraDefaultKeyspace" value="InfinniPlatform" />


        <!-- РАБОТА С ФАЙЛАМИ -->

        <!-- Базовый каталог для хранения файлов системы (по умолчанию - 'BlobStorage') -->
        <add key="BlobStorageBaseDirectory" value="BlobStorage" />


        <!-- ПЕЧАТНЫЕ ПРЕДСТАВЛЕНИЯ -->

        <!-- Формат команды вызова утилиты wkhtmltopdf - http://wkhtmltopdf.org/ (по умолчанию - генерируется автоматически с учетом операционной системы) -->
        <add key="HtmlToPdfUtil" value="" />
        <!-- Каталог для хранения временных файлов при генерации HTML/PDF (по умолчанию - каталог временных файлов учетной записи пользователя) -->
        <add key="HtmlToPdfTemp" value="" />


        <!-- НАСТРОЙКА КЭША -->

        <!-- Имя кэша для приложения (по умолчанию - 'ApplicationCache') -->
        <add key="CacheName" value="InfinniPlatform" />
        <!-- Тип кэша для приложения (возможные варианты: 'Memory', 'Redis', 'TwoLayer', по умолчанию - 'Memory') -->
        <!-- При развертывании приложения в промышленной инфраструктуре рекомендуемое значение - 'TwoLayer' -->
        <add key="CacheType" value="Memory" />
        <!-- Строка подключения к Redis (описание - https://github.com/StackExchange/StackExchange.Redis/blob/master/Docs/Configuration.md) -->
        <add key="RedisConnectionString" value="RedisServer" />
        <!-- Таймаут сброса кэша пользователей в минутах (минимум - 1, по умолчанию - 30) -->
        <add key="UserCacheTimeout" value="30" />


        <!-- РАБОТА С МЕТАДАННЫМИ -->

        <!-- Каталог с файлами метаданных (по умолчанию - 'content') -->
        <add key="ContentDirectory" value="content" />
        <!-- Сборки с системными конфигурациями (скоро потеряет актуальность, менять не нужно) -->
        <add key="ConfigurationList" value="InfinniPlatform.Update,InfinniPlatform.RestfulApi,InfinniPlatform.SystemConfig,InfinniPlatform.Metadata" />

    </appSettings>


    <runtime>

        <!-- ПРАВИЛА ПОИСКА ВНЕШНИХ БИБЛИОТЕК -->

        <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">

            <dependentAssembly>
                <assemblyIdentity name="Autofac" publicKeyToken="17863af14b0044da" culture="neutral" />
                <bindingRedirect oldVersion="0.0.0.0-3.5.0.0" newVersion="3.5.0.0" />
            </dependentAssembly>

            <dependentAssembly>
                <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />
                <bindingRedirect oldVersion="0.0.0.0-7.0.0.0" newVersion="7.0.0.0" />
            </dependentAssembly>

            <dependentAssembly>
                <assemblyIdentity name="Microsoft.Owin" publicKeyToken="31bf3856ad364e35" culture="neutral" />
                <bindingRedirect oldVersion="0.0.0.0-3.0.1.0" newVersion="3.0.1.0" />
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="Microsoft.Owin.Security" publicKeyToken="31bf3856ad364e35" culture="neutral" />
                <bindingRedirect oldVersion="0.0.0.0-3.0.1.0" newVersion="3.0.1.0" />
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="Microsoft.Owin.Security.OAuth" publicKeyToken="31bf3856ad364e35" culture="neutral" />
                <bindingRedirect oldVersion="0.0.0.0-3.0.1.0" newVersion="3.0.1.0" />
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="Microsoft.Owin.Security.Cookies" publicKeyToken="31bf3856ad364e35" culture="neutral" />
                <bindingRedirect oldVersion="0.0.0.0-3.0.1.0" newVersion="3.0.1.0" />
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="System.IdentityModel.Tokens.Jwt" publicKeyToken="31bf3856ad364e35" culture="neutral" />
                <bindingRedirect oldVersion="0.0.0.0-4.0.20622.1351" newVersion="4.0.20622.1351" />
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="Microsoft.IdentityModel.Protocol.Extensions" publicKeyToken="31bf3856ad364e35" culture="neutral" />
                <bindingRedirect oldVersion="0.0.0.0-1.0.2.33" newVersion="1.0.2.33" />
            </dependentAssembly>

            <dependentAssembly>
                <assemblyIdentity name="Microsoft.AspNet.SignalR.Core" publicKeyToken="31bf3856ad364e35" culture="neutral" />
                <bindingRedirect oldVersion="0.0.0.0-2.2.0.0" newVersion="2.2.0.0" />
            </dependentAssembly>

            <dependentAssembly>
                <assemblyIdentity name="System.Web.Cors" publicKeyToken="31bf3856ad364e35" culture="neutral" />
                <bindingRedirect oldVersion="0.0.0.0-5.2.3.0" newVersion="5.2.3.0" />
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="System.Web.Http" publicKeyToken="31bf3856ad364e35" culture="neutral" />
                <bindingRedirect oldVersion="0.0.0.0-5.2.3.0" newVersion="5.2.3.0" />
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="System.Net.Http.Formatting" publicKeyToken="31bf3856ad364e35" culture="neutral" />
                <bindingRedirect oldVersion="0.0.0.0-5.2.3.0" newVersion="5.2.3.0" />
            </dependentAssembly>

            <dependentAssembly>
                <assemblyIdentity name="System.Collections.Immutable" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
                <bindingRedirect oldVersion="0.0.0.0-1.1.37.0" newVersion="1.1.37.0" />
            </dependentAssembly>
            <dependentAssembly>
                <assemblyIdentity name="System.Reflection.Metadata" publicKeyToken="b03f5f7f11d50a3a" culture="neutral" />
                <bindingRedirect oldVersion="0.0.0.0-1.0.22.0" newVersion="1.0.22.0" />
            </dependentAssembly>

        </assemblyBinding>
    </runtime>


    <!-- Регистрация зависимостей приложения -->
    <autofac>
        <components>
            <component
                type="InfinniPlatform.Runtime.Factories.ScriptFactory, InfinniPlatform.Runtime"
                service="InfinniPlatform.Factories.IScriptFactory, InfinniPlatform.Core"
                instance-scope="single-instance" />
            <component
                type="InfinniPlatform.Index.ElasticSearch.Implementation.ElasticProviders.IndexQueryExecutor, InfinniPlatform.Index.ElasticSearch"
                service="InfinniPlatform.Sdk.Environment.Index.IIndexQueryExecutor, InfinniPlatform.Sdk"
                instance-scope="per-dependency" />
            <component
                type="InfinniPlatform.Index.ElasticSearch.Factories.ElasticFactory, InfinniPlatform.Index.ElasticSearch"
                service="InfinniPlatform.Sdk.Environment.Index.IIndexFactory, InfinniPlatform.Sdk"
                instance-scope="single-instance" />
            <component
                type="InfinniPlatform.Logging.Log4NetLogFactory, InfinniPlatform.Core"
                service="InfinniPlatform.Logging.ILogFactory, InfinniPlatform.Core"
                instance-scope="single-instance" />
            <component
                type="InfinniPlatform.Cassandra.Client.CassandraDatabaseFactory, InfinniPlatform.Cassandra"
                service="InfinniPlatform.Cassandra.IColumnFamilyDatabaseFactory, InfinniPlatform.Cassandra"
                instance-scope="single-instance" />
            <component
                type="InfinniPlatform.EventStorage.CassandraEventStorageFactory, InfinniPlatform.EventStorage"
                service="InfinniPlatform.Factories.IEventStorageFactory, InfinniPlatform.Core"
                instance-scope="single-instance" />
            <component
                type="InfinniPlatform.Transactions.TransactionManager, InfinniPlatform.Core"
                service="InfinniPlatform.Sdk.Environment.Transactions.ITransactionManager, InfinniPlatform.Sdk"
                instance-scope="single-instance" />
            <component
                type="InfinniPlatform.ContextComponents.SharedCacheComponent, InfinniPlatform.Core"
                service="InfinniPlatform.Sdk.ContextComponents.ISharedCacheComponent, InfinniPlatform.Sdk"
                instance-scope="single-instance" />
            <component
                type="InfinniPlatform.BlobStorage.FileSystemBlobStorageFactory, InfinniPlatform.BlobStorage"
                service="InfinniPlatform.Factories.IBlobStorageFactory, InfinniPlatform.Core"
                instance-scope="single-instance" />
            <component
                type="InfinniPlatform.Api.Versioning.VersionStrategy, InfinniPlatform.Api"
                service="InfinniPlatform.Sdk.Contracts.IVersionStrategy, InfinniPlatform.Sdk"
                instance-scope="single-instance" />
            <component
                type="InfinniPlatform.Reporting.PrintView.FlowDocumentPrintViewBuilderFactory, InfinniPlatform.Reporting"
                service="InfinniPlatform.Factories.IPrintViewBuilderFactory, InfinniPlatform.Core"
                instance-scope="single-instance" />
            <component
                type="InfinniPlatform.ClientNotification.SignalRWebClientNotificationServiceFactory, InfinniPlatform.ClientNotification"
                service="InfinniPlatform.Factories.IWebClientNotificationServiceFactory, InfinniPlatform.Core"
                instance-scope="single-instance" />
            <component
                type="InfinniPlatform.Factories.GlobalContext, InfinniPlatform.Core"
                service="InfinniPlatform.Sdk.Contracts.IGlobalContext, InfinniPlatform.Sdk"
                instance-scope="per-dependency" />
            <component
                type="InfinniPlatform.ContextComponents.PlatformComponentsPack, InfinniPlatform.Core"
                service="InfinniPlatform.Sdk.Contracts.IPlatformComponentsPack, InfinniPlatform.Sdk"
                instance-scope="per-dependency" />
            <component
                type="InfinniPlatform.Sdk.Global.CustomServiceGlobalContext, InfinniPlatform.Sdk"
                service="InfinniPlatform.Sdk.Global.ICustomServiceGlobalContext, InfinniPlatform.Sdk"
                instance-scope="per-dependency" />
            <component
                type="InfinniPlatform.Runtime.Factories.ScriptFactoryBuilder, InfinniPlatform.Runtime"
                service="InfinniPlatform.Factories.IScriptFactoryBuilder, InfinniPlatform.Core"
                instance-scope="single-instance" />
            <component
                type="InfinniPlatform.Runtime.Implementation.ChangeListeners.ChangeListener, InfinniPlatform.Runtime"
                service="InfinniPlatform.Runtime.IChangeListener, InfinniPlatform.Core"
                instance-scope="single-instance" />
            <component
                type="InfinniPlatform.Sql.DapperSqlQueryExecutorFactory, InfinniPlatform.Sql"
                service="InfinniPlatform.Factories.ISqlQueryExecutorFactory, InfinniPlatform.Core"
                instance-scope="single-instance" />
            <component
                type="InfinniPlatform.WebApi.Factories.HttpResultHandlerFactory, InfinniPlatform.WebApi"
                service="InfinniPlatform.WebApi.IHttpResultHandlerFactory, InfinniPlatform.WebApi"
                instance-scope="single-instance" />
            <component
                type="InfinniPlatform.Metadata.Implementation.MetadataConfiguration.MetadataConfigurationProvider, InfinniPlatform.Metadata"
                service="InfinniPlatform.Sdk.ContextComponents.IMetadataConfigurationProvider, InfinniPlatform.Sdk"
                instance-scope="single-instance" />
            <component
                type="InfinniPlatform.Metadata.Implementation.MetadataConfiguration.ConfigurationObjectBuilder, InfinniPlatform.Metadata"
                service="InfinniPlatform.Sdk.Environment.Metadata.IConfigurationObjectBuilder, InfinniPlatform.Sdk"
                instance-scope="single-instance" />
            <component
                type="InfinniPlatform.Metadata.Implementation.MetadataConfiguration.CrossConfigSearcher, InfinniPlatform.Metadata"
                service="InfinniPlatform.Sdk.Environment.ICrossConfigSearcher, InfinniPlatform.Sdk"
                instance-scope="single-instance" />
            <component
                type="InfinniPlatform.Metadata.Implementation.MetadataConfiguration.ScriptConfiguration, InfinniPlatform.Metadata"
                service="InfinniPlatform.Sdk.Environment.Scripts.IScriptConfiguration, InfinniPlatform.Sdk"
                instance-scope="per-dependency" />
            <component
                type="InfinniPlatform.Compression.GZipDataCompressor, InfinniPlatform.Core"
                service="InfinniPlatform.Compression.IDataCompressor, InfinniPlatform.Core"
                instance-scope="per-dependency" />
            <component
                type="InfinniPlatform.Caching.Factory.SessionManagerFactory, InfinniPlatform.Caching"
                service="InfinniPlatform.Factories.ISessionManagerFactory, InfinniPlatform.Core"
                instance-scope="single-instance" />
        </components>
    </autofac>

</configuration>