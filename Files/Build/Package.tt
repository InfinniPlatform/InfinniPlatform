<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ output extension=".nuspec" #>
<#
	var projectName = GetProjectName();
	var projectFileDll = GetProjectFile(projectName, ".dll");
	var projectFilePdb = GetProjectFile(projectName, ".pdb");
	var projectFileXml = GetProjectFile(projectName, ".xml");
	var projectDependencies = GetProjectDependencies();
	var projectAssemblyInfo = GetProjectAssemblyInfo();
	var projectAssemblyVersion = GetProjectAssemblyVersion(projectAssemblyInfo);
	var projectAssemblyDescription = GetProjectAssemblyDescription(projectAssemblyInfo);
#>
<?xml version="1.0"?>
<package xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
	<metadata xmlns="http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd">
		<id><#= projectName #></id>
		<title><#= projectName #></title>
		<description><#= projectAssemblyDescription #></description>
		<version><#= projectAssemblyVersion #></version>
		<authors>Infinnity Solutions</authors>
		<licenseUrl>http://www.opensource.org/licenses/mit-license.php</licenseUrl>
		<requireLicenseAcceptance>false</requireLicenseAcceptance>
		<language>en-US</language>
		<tags>InfinniPlatform</tags>
		<projectUrl>http://infinnity.ru/</projectUrl>
<#
	if (projectDependencies != null)
	{
#>
		<dependencies>
<#
		foreach (var d in projectDependencies)
		{
#>
			<dependency id="<#= d.Item1 #>" version="<#= d.Item2 #>" />
<#
		}
#>
		</dependencies>
<#
	}
#>
	</metadata>
	<files>
		<file src="<#= projectFileDll #>" target="lib\net45\" />
		<file src="<#= projectFilePdb #>" target="lib\net45\" />
		<file src="<#= projectFileXml #>" target="lib\net45\" />
	</files>
</package>
<#+
	string GetProjectName()
	{
		return Path.GetFileName(GetProjectDirectory()) ?? "";
	}

	string GetProjectDirectory()
	{
		return Path.GetDirectoryName(Path.GetDirectoryName(Host.TemplateFile));
	}

	string GetProjectFile(string projectName, string extension)
	{
		return Path.Combine(@"..\..\Assemblies\", projectName + extension) ?? "";
	}

	string GetProjectAssemblyInfo()
	{
		var assemblyInfoFile = Host.ResolvePath("AssemblyInfo.cs");
		return File.Exists(assemblyInfoFile) ? File.ReadAllText(assemblyInfoFile) : "";
	}

	string GetProjectAssemblyVersion(string projectAssemblyInfo)
	{
		return Regex.Match(projectAssemblyInfo, @"AssemblyVersion\(\""(?<Value>.*?)\""\)").Groups["Value"].Value;
	}

	string GetProjectAssemblyDescription(string projectAssemblyInfo)
	{
		return Regex.Match(projectAssemblyInfo, @"AssemblyDescription\(\""(?<Value>.*?)\""\)").Groups["Value"].Value;
	}

	IEnumerable<Tuple<string, string>> GetProjectDependencies()
	{
		var packagesConfig = Host.ResolvePath(Path.Combine(GetProjectDirectory(), "packages.config"));

		if (File.Exists(packagesConfig))
		{
			try
			{
				return XDocument.Load(packagesConfig).Root.Elements("package")
					.Select(i => new Tuple<string, string>(i.Attribute("id").Value ?? "", i.Attribute("version").Value ?? ""));
			}
			catch
			{
			}
		}

		return null;
	}
#>