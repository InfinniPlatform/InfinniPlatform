using System;
using System.Diagnostics;
using InfinniPlatform.Api.Context;
using InfinniPlatform.Api.ContextTypes;
using InfinniPlatform.Api.Deprecated;
using InfinniPlatform.Api.Metadata;
using InfinniPlatform.Api.Metadata.ConfigurationManagers.Standard.Factories;
using InfinniPlatform.Api.Metadata.ConfigurationManagers.Standard.MetadataManagers;
using InfinniPlatform.SystemConfig.Properties;

namespace InfinniPlatform.SystemConfig.Configurator.Generators
{
	/// <summary>
	///   Модуль генерации сервисов без состояний (с единственным бизнес-процессом)
	/// </summary>
	public sealed class ActionUnitGenerateServiceWithoutState
	{
		public void Action(IApplyContext target)
		{
			var actionUnit = target.Item.ActionUnit;
			var actionName = target.Item.ActionName;

			if (string.IsNullOrEmpty(actionUnit))
			{
				throw new ArgumentException(Resources.ErrorActionUnitNotSpecified);
			}



			var metadataFactory = new ManagerFactoryDocument(target.Version, target.Item.Configuration,target.Item.Metadata);

			MetadataManagerElement scenarioManager = metadataFactory.BuildScenarioManager();
			MetadataManagerElement processManager = metadataFactory.BuildProcessManager();
			MetadataManagerElement serviceManager = metadataFactory.BuildServiceManager();

			//генерируем новый сценарий	
			dynamic scenario = MetadataBuilderExtensions.BuildScenario(actionName, target.Item.ActionUnit,
			                                                           (ContextTypeKind) target.Item.ContextTypeKind,
			                                                           ScriptUnitType.Action);
			scenario.IsAutogenerated = true;
			scenarioManager.MergeItem(scenario);
			
			//генерируем новый процесс
			dynamic process = MetadataBuilderExtensions.BuildProcessOneAction(actionName,
			                                                                  scenarioManager.MetadataReader.GetItem(actionName));
			process.IsAutogenerated = true;			
			processManager.MergeItem(process);

			//генерируем новый сервис
			dynamic service = MetadataBuilderExtensions.BuildServiceApplyJson(actionName,
			                                                                  processManager.MetadataReader.GetItem(actionName),
			                                                                  (ContextTypeKind) target.Item.ContextTypeKind);
			service.IsAutogenerated = true;
			serviceManager.MergeItem(service);


		}
	}
}
